<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.2.xsd
         http://www.springframework.org/schema/tx
     	 http://www.springframework.org/schema/tx/spring-tx-4.2.xsd 
         http://www.springframework.org/schema/aop 
         http://www.springframework.org/schema/aop/spring-aop-4.2.xsd 
		 http://www.springframework.org/schema/mvc 
		 http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd 
		 http://www.springframework.org/schema/task 
		 http://www.springframework.org/schema/task/spring-task-3.0.xsd">


	<!-- 载入常用的配置 -->
	<context:property-placeholder
		location="classpath:config/jdbc_hibernate.properties,classpath:config/druid.properties" />
	<!-- 注解扫描所有包 -->
	<context:component-scan base-package="com.hebj.forecast" />
	
	<!-- 开启MVC注解扫描 -->
	<mvc:annotation-driven />

	<task:executor id="myexecutor" pool-size="500" />
	<task:annotation-driven executor="myexecutor" />

	<!-- 创建数据源 并且使用proxool数据库连接池 -->

	<!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<property name="maxWait" value="${druid.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<property name="numTestsPerEvictionRun" value="10"></property>
		<property name="removeAbandoned" value="false"></property>
		<property name="removeAbandonedTimeout" value="180"></property>

		<!-- testWhileIdle = "true" 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除. 
			testOnBorrow = "false" 借出连接时不要测试，否则很影响性能 timeBetweenEvictionRunsMillis = 
			"30000" 每30秒运行一次空闲连接回收器 minEvictableIdleTimeMillis = "1800000" 池中的连接空闲30分钟后被回收 
			numTestsPerEvictionRun="10" 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 removeAbandoned="true" 
			连接泄漏回收参数，当可用连接数少于3个时才执行 removeAbandonedTimeout="180" -->

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） <property name="poolPreparedStatements" 
			value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" 
			value="20" /> -->
		<!-- 配置监控统计拦截的filters <property name="filters" value="${druid.filters}" 
			/> -->
	</bean>

	<!-- 创建sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.use_outer_join">${hibernate.use_outer_join}</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<!-- 自动扫描注解方式配置的hibernate类文件 -->
		<property name="packagesToScan">
			<list>
				<value>com.hebj.forecast.entity</value>
			</list>
		</property>
	</bean>

	<!-- hibernate 配置 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<!-- 自定义切面配置start <bean id="proxy" class="com.hebj.forecast.proxy.MyProxy"></bean> 
		<aop:config> <aop:pointcut id="pc" expression="execution(* com.hebj.forecast.service.impl.*.*(..))" 
		/> <aop:aspect ref="proxy"> <aop:before pointcut-ref="pc" method="breforPerformance" 
		/> <aop:after pointcut-ref="pc" method="afterPerformance" /> <aop:around 
		pointcut-ref="pc" method="aroundMethod" /> </aop:aspect> </aop:config> -->
	<!-- 自定义切面配置 end -->
	<!-- 性能监控的切面配置 -->
	<!-- <bean id="performanceMonitor" class="org.springframework.aop.interceptor.PerformanceMonitorInterceptor"> 
		</bean> <aop:config> <aop:pointcut id="allServiceMethods" expression="execution(* 
		cn.kiiwii.framework.service.impl.*.*(..))" /> <aop:advisor pointcut-ref="allServiceMethods" 
		advice-ref="performanceMonitor" order="2" /> </aop:config> -->
	<!-- 性能监控的切面配置 end -->
	<!-- 事务配置 start -->

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:advice id="txadvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="transfer*" propagation="REQUIRED" />
			<tx:method name="upgrade*" propagation="REQUIRED" />
			<tx:method name="change*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(* com.hebj.forecast.dao.impl.*.*(..))"
			id="txpointcut" />
		<aop:advisor advice-ref="txadvice" pointcut-ref="txpointcut" />
	</aop:config>
	<!-- 事务配置 end -->
	<!-- 强制使用cglib代理 <aop:aspectj-autoproxy proxy-target-class="true" /> -->
	
	<!-- 以下为视图映射配置 -->
	<bean id="jspViewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value="" />
	</bean>
	
	<!-- 其他配置 -->
	<!-- 静态文件访问 -->
	<mvc:default-servlet-handler />
</beans>